version: "3.9"

services:
  # --- Airflow metadata database ---
  airflow-db:
    container_name: airflow-db
    image: postgres:16.4
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
      PGUSER: airflow
      PGPASSWORD: airflow
      PGDATABASE: airflow
    ports:
      - "5432:5432"
    volumes:
      - ./pgdata_airflow:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      retries: 5
    restart: always
    depends_on:
      - py

  # --- Separate Postgres for weather tracking ---
  weather-db:
    container_name: weather-db
    image: postgres:16.4
    environment:
      POSTGRES_USER: weather_user
      POSTGRES_PASSWORD: weather_pass
      POSTGRES_DB: weather_db
      PGUSER: weather_user
      PGPASSWORD: weather_pass
      PGDATABASE: weather_db
    ports:
      - "5433:5432"
    volumes:
      - ./pgdata_weather:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U weather_user -d weather_db"]
      interval: 10s
      retries: 5
    restart: always

  # --- pgAdmin UI for both databases ---
  pgadmin:
    container_name: pgadmin
    image: elestio/pgadmin:REL-8_10
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      CSRF_ENABLED: "False"
    ports:
      - "5050:80"
    depends_on:
      - airflow-db
      - weather-db

  # --- Airflow Webserver ---
  airflow-webserver:
    image: apache/airflow:2.8.1
    container_name: airflow-webserver
    command: webserver
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      AIRFLOW_CONN_WEATHER_DB: postgresql+psycopg2://weather_user:weather_pass@weather-db:5432/weather_db
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth"
      PIP_ADDITIONAL_REQUIREMENTS: "/requirements.txt"
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./data/orders:/tmp/data/orders
      - ./requirements.txt:/requirements.txt
    depends_on:
      - airflow-init
      - airflow-db
      - weather-db
    restart: always

  # --- Airflow Scheduler ---
  airflow-scheduler:
    image: apache/airflow:2.8.1
    container_name: airflow-scheduler
    command: scheduler
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      AIRFLOW_CONN_WEATHER_DB: postgresql+psycopg2://weather_user:weather_pass@weather-db:5432/weather_db
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
    depends_on:
      - airflow-init
      - airflow-db
      - weather-db
    restart: always

  # --- Airflow DB initialization & user setup ---
  airflow-init:
    image: apache/airflow:2.8.1
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db init
        airflow users create \
          --username airflow \
          --password airflow \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
    depends_on:
      - airflow-db
      - weather-db
    restart: "no"
  py:
    build: .
    container_name: py
    image: python:3.12.5-bookworm
    stdin_open: false
    tty: true   # Keep STDIN open for exec or attach
    environment:
      SCRIPTS_PATH: /scripts # you can use 'docker exec py bash -c "pip install -r \${SCRIPTS_PATH}/requirements.txt"' to install the requirements file. Note: generally, it is better to create a custom image with the required packages installed. Otherwise, each time the container is spun up, the requirements need to be pulled and reinstalled.
      #API_PATH: https://randomuser.me/api/
      POSTGRES_USER: weather_user
      POSTGRES_PASSWORD: weather_pass
      POSTGRES_DB: weather_db
    volumes:
      - .:/app  # Mount current dir into container

volumes:
  pgdata_airflow:
  pgdata_weather:
